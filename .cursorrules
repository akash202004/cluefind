# DevSync - Developer Portfolio + Endorsements Platform
## Assignment: Fullstack Developer Fulltime Assignment 1

## Project Overview
- **Framework**: Next.js 15 with TypeScript (MANDATORY)
- **Styling**: Tailwind CSS + RadixUI or other UI components (MANDATORY)
- **Database**: PostgreSQL with Prisma ORM (MANDATORY)
- **Authentication**: NextAuth.js with GitHub OAuth (GOOD TO HAVE)
- **AI Integration**: OpenAI GPT-4 for portfolio reviews and recommendations (OPTIONAL)
- **Deployment**: Vercel with CI/CD (MANDATORY)
- **File Upload**: Cloudinary for images
- **Version Control**: Git (MANDATORY)

## Code Standards (Assignment Requirements)
- Use TypeScript for all files (MANDATORY for type safety and code maintainability)
- Follow Next.js 15 App Router conventions (MANDATORY)
- Use functional components with hooks (React.js MANDATORY)
- Implement proper error handling and loading states
- Use Tailwind CSS for styling (MANDATORY - no custom CSS unless necessary)
- Follow ESLint and Prettier configurations
- Use meaningful variable and function names
- Add JSDoc comments for complex functions
- Implement component-based architecture (MANDATORY)
- Use state management (Hooks, Context API, Query Params) (MANDATORY)
- Implement proper lifecycle methods and virtual DOM understanding (MANDATORY)

## File Structure
```
src/
├── app/                    # Next.js 15 App Router
│   ├── (auth)/            # Auth-related pages
│   ├── (dashboard)/       # Protected dashboard pages
│   ├── api/               # API routes
│   ├── [username]/        # Dynamic portfolio routes
│   └── globals.css
├── components/            # Reusable components
│   ├── ui/               # RadixUI components
│   ├── forms/            # Form components
│   ├── portfolio/        # Portfolio-specific components
│   └── ai/               # AI-related components
├── lib/                  # Utility functions
│   ├── auth.ts          # NextAuth configuration
│   ├── db.ts            # Prisma client
│   ├── ai.ts            # AI service functions
│   └── utils.ts         # General utilities
├── types/               # TypeScript type definitions
└── hooks/               # Custom React hooks
```

## Database Schema (Prisma + PostgreSQL - MANDATORY)
- Use PostgreSQL as the database management system (MANDATORY)
- Use camelCase for field names
- Include proper relationships and indexes
- Add validation at both database and application level
- Use UUIDs for primary keys
- Include timestamps (createdAt, updatedAt) for all models
- Implement robust data validation and sanitization (MANDATORY)
- Prevent security vulnerabilities through proper database design (MANDATORY)
- Use proper SQL query optimization for performance
- Implement proper database connection pooling
- Use database transactions for complex operations
- Implement proper database migrations
- Add proper database indexing for performance

## API Routes (Next.js 15 - MANDATORY)
- Use Next.js 15 App Router API routes (MANDATORY)
- Implement proper HTTP status codes
- Add request validation using Zod
- Include error handling and logging
- Use proper TypeScript types for request/response
- Implement RESTful APIs (MANDATORY)
- Use asynchronous programming patterns (MANDATORY)
- Implement proper middleware (MANDATORY)
- Add proper package management (MANDATORY)
- Implement efficient, scalable, and secure backend solutions (MANDATORY)

## AI Integration (OPTIONAL - Significant Plus)
- Use OpenAI GPT-4 for AI features (OPTIONAL - AI-SDK, OpenAI, Gemini, Groq)
- Implement proper prompt engineering
- Add rate limiting for AI API calls
- Cache AI responses when appropriate
- Handle AI API errors gracefully
- Use Jinja-style templates for AI responses
- Leverage AI for add-on features (OPTIONAL)
- Use AI for enhanced capabilities and competitive edge (OPTIONAL)
- Implement AI for innovation and efficiency (OPTIONAL)

## Authentication & Security (GOOD TO HAVE)
- Use NextAuth.js for authentication (GOOD TO HAVE - JWT-based or preferred approach)
- Implement proper session management
- Add CSRF protection
- Validate and sanitize all user inputs
- Use environment variables for sensitive data
- Implement proper authorization checks
- Enforce granular authorization rules to control user access (GOOD TO HAVE)
- Implement secure authentication mechanism (GOOD TO HAVE)
- Discuss mitigation strategies and contingency plans for security challenges (GOOD TO HAVE)

## UI/UX Guidelines (MANDATORY)
- Use RadixUI for accessible components (MANDATORY)
- Implement responsive design (mobile-first) (MANDATORY)
- Use consistent spacing and typography
- Add loading states and error boundaries
- Ensure accessibility (ARIA labels, keyboard navigation) (MANDATORY)
- Use proper color contrast and focus states
- Design clean, intuitive, and responsive user interface (MANDATORY)
- Align with Next.js 15's component-based architecture (MANDATORY)
- Consider accessibility best practices for users with diverse needs (MANDATORY)
- Build user-friendly applications (MANDATORY)

## Performance (MANDATORY)
- Implement proper image optimization
- Use Next.js Image component
- Add proper caching strategies
- Implement code splitting (MANDATORY)
- Use React.memo for expensive components
- Optimize database queries
- Optimize code for performance and efficiency (MANDATORY)
- Use server-side rendering (SSR) (MANDATORY)
- Implement static site generation (SSG) (MANDATORY)
- Build fast applications (MANDATORY)
- Implement proper routing optimization (MANDATORY)
- Use proper data fetching optimization (MANDATORY)

## Testing (GOOD TO HAVE)
- Write unit tests for utility functions
- Add integration tests for API routes (GOOD TO HAVE)
- Use React Testing Library for components
- Implement end-to-end tests for critical flows (GOOD TO HAVE)
- Test AI integration with mock responses
- Consider integration and end-to-end testing for comprehensive coverage (GOOD TO HAVE)
- Implement proper test coverage and effectiveness (GOOD TO HAVE)

## Deployment (MANDATORY)
- Use Vercel for deployment (MANDATORY - suitable hosting platform)
- Configure environment variables properly
- Set up CI/CD pipeline (MANDATORY - continuous integration and continuous delivery)
- Implement proper error monitoring
- Use Vercel Analytics for performance tracking
- Deploy to suitable hosting platform (MANDATORY)
- Configure streamlined development and deployment processes (MANDATORY)
- Ensure successful deployment and CI/CD configuration (MANDATORY)

## AI Features Implementation
- Portfolio Review Generator: Brutal but constructive feedback
- Skill Recommendations: AI-powered career guidance
- Project Description Helper: Auto-generate compelling descriptions
- Profile Summary Generator: Professional bio creation
- Endorsement Verification: AI-powered skill validation

## Code Quality (MANDATORY)
- Use TypeScript strict mode
- Implement proper error boundaries
- Add comprehensive logging
- Use proper TypeScript types (avoid 'any')
- Follow SOLID principles
- Write self-documenting code
- Write clean, well-structured, and well-documented code (MANDATORY)
- Adhere to best practices and style guides (MANDATORY)
- Build robust, scalable, fast, secure, and user-friendly applications (MANDATORY)
- Demonstrate comprehensive understanding of full-stack development (MANDATORY)
- Show sophisticated problem-solving and innovative solutions (MANDATORY)
- Reflect critical thinking, analytical capabilities, and strategic design (MANDATORY)
- Create valuable, transformative outcomes (MANDATORY)
- Implement scalable solutions (MANDATORY)

## Git Workflow (MANDATORY)
- Use conventional commit messages
- Create feature branches for new features
- Add proper commit descriptions
- Use pull requests for code review
- Keep commits atomic and focused
- Use Git for version control (MANDATORY)
- Share GitHub Repository along with Live Deployment (MANDATORY)
- Ensure proper Git workflow and repository management (MANDATORY)

## Environment Variables
- NEXT_PUBLIC_* for client-side variables
- Use proper validation for env vars
- Document all required environment variables
- Use different values for different environments

## Documentation (MANDATORY)
- Add README with setup instructions
- Document API endpoints
- Include component documentation
- Add deployment guide
- Document AI features and usage
- Ensure proper code structure, organization, and documentation (MANDATORY)
- Include comprehensive project documentation (MANDATORY)

## Specific to DevSync (Assignment Alignment)
- Implement dynamic [username] routes for portfolios
- Add endorsement system with verification
- Create AI-powered portfolio reviews (OPTIONAL - AI integration)
- Implement file upload for project images
- Add analytics dashboard for profile performance
- Create responsive portfolio layouts (MANDATORY - responsive UI)
- Implement skill endorsement workflow
- Add AI-generated content features (OPTIONAL - AI integration)
- Address requirements of developer user group/scenario (MANDATORY)
- Implement CRUD operations for data entities (MANDATORY)
- Ensure robust data validation and sanitization (MANDATORY)
- Prevent security vulnerabilities (MANDATORY)
- Address real-world challenges (MANDATORY)
- Implement scalability, error handling, and security (MANDATORY)
- Make sure name, GitHub Profile and LinkedIn profile is mentioned in footer (MANDATORY)

## Advanced Development Rules

### Component Architecture
- Use compound components for complex UI patterns
- Implement proper prop drilling prevention with Context API
- Use React.memo for expensive components with stable props
- Implement proper component composition over inheritance
- Use custom hooks for reusable logic
- Always implement proper cleanup in useEffect hooks
- Use useCallback and useMemo for performance optimization
- Implement proper error boundaries for component trees

### State Management
- Use React Query/TanStack Query for server state
- Implement optimistic updates for better UX
- Use Zustand for complex client state (if needed)
- Implement proper loading states for all async operations
- Use proper error states with retry mechanisms
- Implement proper caching strategies
- Use proper invalidation for cache updates
- Implement proper pagination for large datasets

### API Design
- Use RESTful API conventions
- Implement proper HTTP status codes
- Use proper request/response validation with Zod
- Implement rate limiting for API endpoints
- Add proper API documentation with OpenAPI/Swagger
- Use proper error responses with consistent format
- Implement proper pagination for list endpoints
- Use proper filtering and sorting capabilities
- Implement proper API versioning strategy

### Database Best Practices
- Use proper database indexing for performance
- Implement proper database migrations
- Use database transactions for complex operations
- Implement proper database connection pooling
- Use proper database query optimization
- Implement proper database backup strategies
- Use proper database monitoring and logging
- Implement proper database security measures

### Security Implementation
- Implement proper CORS configuration
- Use proper CSRF protection
- Implement proper XSS prevention
- Use proper SQL injection prevention
- Implement proper authentication middleware
- Use proper authorization checks
- Implement proper input sanitization
- Use proper output encoding
- Implement proper session management
- Use proper password hashing (bcrypt)
- Implement proper API key management
- Use proper environment variable security

### Performance Optimization
- Implement proper code splitting
- Use proper lazy loading for components
- Implement proper image optimization
- Use proper caching strategies (Redis/Memcached)
- Implement proper CDN usage
- Use proper database query optimization
- Implement proper bundle size optimization
- Use proper memory leak prevention
- Implement proper garbage collection optimization
- Use proper service worker for caching

### Testing Strategy
- Write unit tests for all utility functions
- Write integration tests for API routes
- Write component tests with React Testing Library
- Write end-to-end tests with Playwright
- Implement proper test coverage (aim for 80%+)
- Use proper mocking for external dependencies
- Implement proper test data factories
- Use proper test environment setup
- Implement proper CI/CD testing pipeline
- Use proper performance testing

### Error Handling
- Implement proper error boundaries
- Use proper error logging (Sentry/LogRocket)
- Implement proper error monitoring
- Use proper error reporting
- Implement proper error recovery mechanisms
- Use proper user-friendly error messages
- Implement proper error tracking
- Use proper error analytics
- Implement proper error notifications
- Use proper error escalation procedures

### Monitoring & Analytics
- Implement proper application monitoring
- Use proper performance monitoring
- Implement proper user analytics
- Use proper error tracking
- Implement proper business metrics
- Use proper A/B testing framework
- Implement proper user feedback collection
- Use proper conversion tracking
- Implement proper retention analytics
- Use proper cohort analysis

### DevOps & Deployment
- Use proper CI/CD pipeline
- Implement proper environment management
- Use proper containerization (Docker)
- Implement proper infrastructure as code
- Use proper monitoring and alerting
- Implement proper backup and recovery
- Use proper security scanning
- Implement proper performance testing
- Use proper load balancing
- Implement proper auto-scaling

### Code Quality Standards
- Use proper TypeScript strict mode
- Implement proper ESLint rules
- Use proper Prettier configuration
- Implement proper pre-commit hooks
- Use proper code review process
- Implement proper documentation standards
- Use proper naming conventions
- Implement proper code organization
- Use proper design patterns
- Implement proper SOLID principles

### AI Integration Best Practices
- Implement proper prompt engineering
- Use proper AI response validation
- Implement proper AI error handling
- Use proper AI rate limiting
- Implement proper AI response caching
- Use proper AI model versioning
- Implement proper AI cost optimization
- Use proper AI security measures
- Implement proper AI monitoring
- Use proper AI fallback mechanisms

### Accessibility Standards
- Implement proper ARIA labels
- Use proper keyboard navigation
- Implement proper screen reader support
- Use proper color contrast ratios
- Implement proper focus management
- Use proper semantic HTML
- Implement proper alt text for images
- Use proper form labels and validation
- Implement proper skip navigation
- Use proper responsive design

### Internationalization
- Implement proper i18n support
- Use proper locale detection
- Implement proper date/time formatting
- Use proper number formatting
- Implement proper currency formatting
- Use proper text direction support
- Implement proper pluralization rules
- Use proper translation management
- Implement proper locale switching
- Use proper SEO for multiple languages

### Mobile Optimization
- Implement proper touch interactions
- Use proper mobile navigation patterns
- Implement proper mobile performance
- Use proper mobile-specific UI components
- Implement proper mobile testing
- Use proper mobile analytics
- Implement proper mobile SEO
- Use proper mobile accessibility
- Implement proper mobile security
- Use proper mobile offline support

### SEO & Performance
- Implement proper meta tags
- Use proper structured data
- Implement proper sitemap generation
- Use proper robots.txt
- Implement proper Open Graph tags
- Use proper Twitter Card tags
- Implement proper page speed optimization
- Use proper Core Web Vitals optimization
- Implement proper mobile-first indexing
- Use proper local SEO optimization

### Data Privacy & Compliance
- Implement proper GDPR compliance
- Use proper data encryption
- Implement proper data anonymization
- Use proper consent management
- Implement proper data retention policies
- Use proper data portability
- Implement proper data deletion
- Use proper privacy policy
- Implement proper cookie consent
- Use proper data breach notification

### Scalability Considerations
- Implement proper horizontal scaling
- Use proper database sharding
- Implement proper microservices architecture
- Use proper event-driven architecture
- Implement proper message queues
- Use proper load balancing
- Implement proper caching layers
- Use proper CDN implementation
- Implement proper auto-scaling
- Use proper resource optimization

### Maintenance & Updates
- Implement proper dependency management
- Use proper version control strategy
- Implement proper release management
- Use proper rollback procedures
- Implement proper feature flags
- Use proper A/B testing
- Implement proper monitoring
- Use proper alerting systems
- Implement proper documentation
- Use proper knowledge sharing

## Assignment Evaluation Criteria Alignment

### Functionality (MANDATORY)
- Completeness and correctness of CRUD operations (MANDATORY)
- Data validation and sanitization (MANDATORY)
- Authentication and authorization (GOOD TO HAVE)
- Robust data validation to prevent security vulnerabilities (MANDATORY)

### User Interface (MANDATORY)
- User-friendliness (MANDATORY)
- Responsiveness (MANDATORY)
- Adherence to accessibility best practices (MANDATORY)
- Clean, intuitive, and responsive user interface (MANDATORY)

### Code Quality (MANDATORY)
- Code structure, organization, documentation (MANDATORY)
- Optimization techniques (MANDATORY)
- Clean, well-structured, and well-documented code (MANDATORY)
- Best practices and style guides adherence (MANDATORY)

### Testing (GOOD TO HAVE)
- Coverage and effectiveness of unit, integration, and end-to-end tests (GOOD TO HAVE)
- Comprehensive testing coverage (GOOD TO HAVE)

### Deployment (MANDATORY)
- Successful deployment and CI/CD configuration (MANDATORY)
- Live deployment on suitable hosting platform (MANDATORY)
- Continuous integration and continuous delivery (MANDATORY)

### Real-World Considerations (MANDATORY)
- Demonstrated understanding of potential challenges (MANDATORY)
- Proposed solutions for scalability, error handling, and security (MANDATORY)
- Production environment considerations (MANDATORY)

### Submission Requirements (MANDATORY)
- GitHub Repository with Live Deployment (MANDATORY)
- Name, GitHub Profile and LinkedIn profile in footer (MANDATORY)
- Proper project documentation and setup instructions (MANDATORY)
