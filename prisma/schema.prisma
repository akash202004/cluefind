// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  bio           String?
  location      String?
  githubUrl     String?
  linkedinUrl   String?
  websiteUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  skills        Skill[]
  projects      Project[]
  endorsements  Endorsement[] @relation("EndorsementsReceived")
  givenEndorsements Endorsement[] @relation("EndorsementsGiven")
  profileViews  ProfileView[]
  endorsementRequests EndorsementRequest[] @relation("EndorsementRequestsSent")
  receivedEndorsementRequests EndorsementRequest[] @relation("EndorsementRequestsReceived")
  aiReviews     AIReview[]

  @@map("users")
}

model Skill {
  id                String   @id @default(cuid())
  name              String
  category          String
  level             String
  yearsOfExperience Int
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  endorsements Endorsement[]

  @@map("skills")
}

model Project {
  id                    String   @id @default(cuid())
  title                 String
  description           String
  aiGeneratedDescription String?
  technologies          String[]
  category              String
  images                String[]
  liveUrl               String?
  githubUrl             String?
  featured              Boolean  @default(false)
  startDate             DateTime
  endDate               DateTime?
  teamSize              Int?
  role                  String
  achievements          String[]
  metrics               Json?
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  endorsements Endorsement[]

  @@map("projects")
}

model Endorsement {
  id            String   @id @default(cuid())
  endorserId    String
  endorseeId    String
  skillId       String?
  projectId     String?
  type          String
  level         String
  message       String?
  projectContext String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  endorser User   @relation("EndorsementsGiven", fields: [endorserId], references: [id], onDelete: Cascade)
  endorsee User   @relation("EndorsementsReceived", fields: [endorseeId], references: [id], onDelete: Cascade)
  skill    Skill? @relation(fields: [skillId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("endorsements")
}

model ProfileView {
  id        String   @id @default(cuid())
  userId    String
  viewerId  String?
  ipAddress String
  userAgent String
  referrer  String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile_views")
}

model EndorsementRequest {
  id          String   @id @default(cuid())
  requesterId String
  targetUserId String
  skillId     String?
  projectId   String?
  message     String
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester User @relation("EndorsementRequestsSent", fields: [requesterId], references: [id], onDelete: Cascade)
  target    User @relation("EndorsementRequestsReceived", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("endorsement_requests")
}

model AIReview {
  id          String   @id @default(cuid())
  userId      String
  reviewType  String
  score       Int
  feedback    String
  suggestions String[]
  generatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_reviews")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
