// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT 
  RECRUITER
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  emailVerified       Boolean  @default(false)
  name                String?
  role                Role   @default(STUDENT)
  username            String   @unique
  image               String?
  bio                 String?
  googleId            String?  @unique
  onboardingComplete  Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  profile       Profile?
  vouches       Vouch[] @relation("VouchesGiven")
  vouchActions  VouchAction[] @relation("VouchActionsGiven")

  @@index([name])
  @@index([username])
  @@index([bio])
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  skills        String[] @default([])
  resumeContent String?
  githubId      String?
  projects      Json?    
  socialLinks   Json?    
  lastSyncedAt  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  repos         Repo[]
  vouches       Vouch[]

  @@index([skills])
  @@index([resumeContent])
}

model Repo {
  id          String  @id @default(cuid())
  profileId   String
  name        String
  description String?
  url         String
  languages   String[]
  fork        Boolean @default(false)
  createdAt   DateTime @default(now())

  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([description])
  @@index([languages])
}
  
model Vouch {
  id          String   @id @default(cuid())
  profileId   String
  voucherId   String
  skill       String?
  message     String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  voucher     User     @relation("VouchesGiven", fields: [voucherId], references: [id], onDelete: Cascade)

  @@unique([profileId, voucherId])
}

model VouchAction {
  id         String   @id @default(cuid())
  voucherId  String
  dayKey     String
  count      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  voucher    User     @relation("VouchActionsGiven", fields: [voucherId], references: [id], onDelete: Cascade)

  @@unique([voucherId, dayKey])
}